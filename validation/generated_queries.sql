-- This file is generated by pginspector. DO NOT EDIT.



-- name: SelectManufacturerByID :one proto-type=v1.Manufacturer
SELECT
	created_at,
	id,
	name,
	updated_at
FROM public.manufacturer
WHERE id = pggen.arg('id');

-- name: SelectManufacturerList :many proto-type=v1.Manufacturer
SELECT
	created_at,
	id,
	name,
	updated_at
FROM public.manufacturer;

-- name: SelectVehicleByID :one proto-type=v1.Vehcile
SELECT
	created_at,
	id,
	make,
	model,
	updated_at,
	vin,
	year
FROM public.vehicle
WHERE id = pggen.arg('id');

-- name: SelectVehicleList :many proto-type=v1.Vehcile
SELECT
	created_at,
	id,
	make,
	model,
	updated_at,
	vin,
	year
FROM public.vehicle;

-- name: SelectModelByID :one proto-type=v1.Model
SELECT
	created_at,
	id,
	name,
	updated_at
FROM public.model
WHERE id = pggen.arg('id');

-- name: SelectModelList :many proto-type=v1.Model
SELECT
	created_at,
	id,
	name,
	updated_at
FROM public.model;

-- name: SelectPersonByID :one proto-type=v1.Person
SELECT
	created_at,
	id,
	name,
	updated_at
FROM public.person
WHERE id = pggen.arg('id');

-- name: SelectPersonList :many proto-type=v1.Person
SELECT
	created_at,
	id,
	name,
	updated_at
FROM public.person;

-- name: SelectRentalByID :one proto-type=v1.Rental
SELECT
	created_at,
	end_date,
	id,
	start_date,
	updated_at,
	vehicle
FROM public.rental
WHERE id = pggen.arg('id');

-- name: SelectRentalList :many proto-type=v1.Rental
SELECT
	created_at,
	end_date,
	id,
	start_date,
	updated_at,
	vehicle
FROM public.rental;

-- name: SelectOwnershipByID :one proto-type=v1.Ownership
SELECT
	created_at,
	end_date,
	id,
	person,
	start_date,
	updated_at,
	vehicle
FROM public.ownership
WHERE id = pggen.arg('id');

-- name: SelectOwnershipList :many proto-type=v1.Ownership
SELECT
	created_at,
	end_date,
	id,
	person,
	start_date,
	updated_at,
	vehicle
FROM public.ownership;

-- name: UpdateManufacturer :one proto-type=v1.Manufacturer
UPDATE public.manufacturer
SET (
	created_at,
	id,
	name,
	updated_at
) = (
	pggen.arg('created_at'),
	pggen.arg('id'),
	pggen.arg('name'),
	pggen.arg('updated_at')
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateManufacturerFieldMask :one proto-type=v1.Manufacturer
UPDATE public.manufacturer
SET (
	created_at,
	id,
	name,
	updated_at
) = (
	CASE
		WHEN 'created_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('created_at')
		ELSE created_at
	END,
	CASE
		WHEN 'id' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('id')
		ELSE id
	END,
	CASE
		WHEN 'name' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('name')
		ELSE name
	END,
	CASE
		WHEN 'updated_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('updated_at')
		ELSE updated_at
	END
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateVehicle :one proto-type=v1.Vehcile
UPDATE public.vehicle
SET (
	created_at,
	id,
	make,
	model,
	updated_at,
	vin,
	year
) = (
	pggen.arg('created_at'),
	pggen.arg('id'),
	pggen.arg('make'),
	pggen.arg('model'),
	pggen.arg('updated_at'),
	pggen.arg('vin'),
	pggen.arg('year')
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateVehicleFieldMask :one proto-type=v1.Vehcile
UPDATE public.vehicle
SET (
	created_at,
	id,
	make,
	model,
	updated_at,
	vin,
	year
) = (
	CASE
		WHEN 'created_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('created_at')
		ELSE created_at
	END,
	CASE
		WHEN 'id' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('id')
		ELSE id
	END,
	CASE
		WHEN 'make' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('make')
		ELSE make
	END,
	CASE
		WHEN 'model' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('model')
		ELSE model
	END,
	CASE
		WHEN 'updated_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('updated_at')
		ELSE updated_at
	END,
	CASE
		WHEN 'vin' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('vin')
		ELSE vin
	END,
	CASE
		WHEN 'year' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('year')
		ELSE year
	END
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateModel :one proto-type=v1.Model
UPDATE public.model
SET (
	created_at,
	id,
	name,
	updated_at
) = (
	pggen.arg('created_at'),
	pggen.arg('id'),
	pggen.arg('name'),
	pggen.arg('updated_at')
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateModelFieldMask :one proto-type=v1.Model
UPDATE public.model
SET (
	created_at,
	id,
	name,
	updated_at
) = (
	CASE
		WHEN 'created_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('created_at')
		ELSE created_at
	END,
	CASE
		WHEN 'id' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('id')
		ELSE id
	END,
	CASE
		WHEN 'name' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('name')
		ELSE name
	END,
	CASE
		WHEN 'updated_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('updated_at')
		ELSE updated_at
	END
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdatePerson :one proto-type=v1.Person
UPDATE public.person
SET (
	created_at,
	id,
	name,
	updated_at
) = (
	pggen.arg('created_at'),
	pggen.arg('id'),
	pggen.arg('name'),
	pggen.arg('updated_at')
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdatePersonFieldMask :one proto-type=v1.Person
UPDATE public.person
SET (
	created_at,
	id,
	name,
	updated_at
) = (
	CASE
		WHEN 'created_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('created_at')
		ELSE created_at
	END,
	CASE
		WHEN 'id' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('id')
		ELSE id
	END,
	CASE
		WHEN 'name' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('name')
		ELSE name
	END,
	CASE
		WHEN 'updated_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('updated_at')
		ELSE updated_at
	END
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateRental :one proto-type=v1.Rental
UPDATE public.rental
SET (
	created_at,
	end_date,
	id,
	start_date,
	updated_at,
	vehicle
) = (
	pggen.arg('created_at'),
	pggen.arg('end_date'),
	pggen.arg('id'),
	pggen.arg('start_date'),
	pggen.arg('updated_at'),
	pggen.arg('vehicle')
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateRentalFieldMask :one proto-type=v1.Rental
UPDATE public.rental
SET (
	created_at,
	end_date,
	id,
	start_date,
	updated_at,
	vehicle
) = (
	CASE
		WHEN 'created_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('created_at')
		ELSE created_at
	END,
	CASE
		WHEN 'end_date' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('end_date')
		ELSE end_date
	END,
	CASE
		WHEN 'id' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('id')
		ELSE id
	END,
	CASE
		WHEN 'start_date' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('start_date')
		ELSE start_date
	END,
	CASE
		WHEN 'updated_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('updated_at')
		ELSE updated_at
	END,
	CASE
		WHEN 'vehicle' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('vehicle')
		ELSE vehicle
	END
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateOwnership :one proto-type=v1.Ownership
UPDATE public.ownership
SET (
	created_at,
	end_date,
	id,
	person,
	start_date,
	updated_at,
	vehicle
) = (
	pggen.arg('created_at'),
	pggen.arg('end_date'),
	pggen.arg('id'),
	pggen.arg('person'),
	pggen.arg('start_date'),
	pggen.arg('updated_at'),
	pggen.arg('vehicle')
) WHERE id = pggen.arg('id') RETURNING *;

-- name: UpdateOwnershipFieldMask :one proto-type=v1.Ownership
UPDATE public.ownership
SET (
	created_at,
	end_date,
	id,
	person,
	start_date,
	updated_at,
	vehicle
) = (
	CASE
		WHEN 'created_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('created_at')
		ELSE created_at
	END,
	CASE
		WHEN 'end_date' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('end_date')
		ELSE end_date
	END,
	CASE
		WHEN 'id' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('id')
		ELSE id
	END,
	CASE
		WHEN 'person' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('person')
		ELSE person
	END,
	CASE
		WHEN 'start_date' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('start_date')
		ELSE start_date
	END,
	CASE
		WHEN 'updated_at' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('updated_at')
		ELSE updated_at
	END,
	CASE
		WHEN 'vehicle' = ANY(pggen.arg('_field_mask')::text[]) THEN pggen.arg('vehicle')
		ELSE vehicle
	END
) WHERE id = pggen.arg('id') RETURNING *;